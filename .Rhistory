var_echantillon
ecart_type_echantillon
# estimateur de la variance de la moyenne
var_est_moy<-(1-(n_echantillon/n_population))*(var_echantillon/n_echantillon)
var_est_moy
ecar_typ_moyenne<-sqrt(var_est_moy)
var_est_moy
ecar_typ_moyenne
intervalle1<-moyenne_echantillon-qnorm(0.975)*ecart_type_echantillon
intervalle2<-inf_intervalle<-moyenne_echantillon-qnorm(0.975)*ecart_type_echantillon
intervalle1
intervalle2
intervalle1<-moyenne_echantillon-qnorm(0.975)*ecart_type_echantillon
intervalle2<-inf_intervalle<-moyenne_echantillon+qnorm(0.975)*ecart_type_echantillon
intervalle1
intervalle2
intervalle1<-moyenne_echantillon-qnorm(0.975)*ecart_type_echantillon
intervalle2<-inf_intervalle<-moyenne_echantillon+qnorm(0.975)*ecart_type_echantillon
intervalle1
intervalle2
intervalle1<-moyenne_echantillon-qnorm(0.97)*ecart_type_echantillon
intervalle2<-inf_intervalle<-moyenne_echantillon+qnorm(0.97)*ecart_type_echantillon
intervalle1
intervalle2
t.test(echantillon)
# Supposons que votre population soit déjà dans l'objet `population`
set.seed(123)  # pour rendre les résultats reproductibles
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
set.seed(123)
n_rep <- 100
n_draw <- 50
sample_means <- numeric(n_rep)  # vecteur vide pour stocker les moyennes
for (i in seq_len(n_rep)) {
samp <- sample(population, n_draw)
sample_means[i] <- mean(samp)
}
print(sample_means)
set.seed(123)
population=rnorm(200,600000,50000)
moyenne_population<-mean(population) #moyenne
var_population <- mean((population - mean(population))^2)# calcul direct de la variance
# calcul indirect de la variance
n_population <- length(population)
var2_population <- var(population) * (n-1) / n
ecart_type_population<-sd(population)
n
moyenne_population
var_population
var2_population
ecart_type_population
echantillon=sample(population,50)
echantillon
n_echantillon <- length(echantillon) # taille de l'écahntillon
moyenne_echantillon<-mean(echantillon) #moyenne
var_echantillon <- var(echantillon) # variance
ecart_type_echantillon<-sd(echantillon)
n_echantillon
moyenne_echantillon
var_echantillon
ecart_type_echantillon
# estimateur de la variance de la moyenne
var_est_moy<-(1-(n_echantillon/n_population))*(var_echantillon/n_echantillon)
var_est_moy
ecar_typ_moyenne<-sqrt(var_est_moy)
var_est_moy
ecar_typ_moyenne
intervalle1<-moyenne_echantillon-qnorm(0.97)*ecart_type_echantillon
intervalle2<-inf_intervalle<-moyenne_echantillon+qnorm(0.97)*ecart_type_echantillon
intervalle1
intervalle2
t.test(echantillon)
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
n_rep <- 100
n_draw <- 50
sample_means <- numeric(n_rep)  # vecteur vide pour stocker les moyennes
for (i in seq_len(n_rep)) {
samp <- sample(population, n_draw)
sample_means[i] <- mean(samp)
}
print(sample_means)
n_rep <- 100
n_draw <- 50
sample_means <- numeric(n_rep)  # vecteur vide pour stocker les moyennes
for (i in seq_len(n_rep)) {
samp <- sample(population, n_draw)
sample_means[i] <- mean(samp)
}
print(sample_means)
n_rep <- 100
n_draw <- 50
sample_means <- numeric(n_rep)  # vecteur vide pour stocker les moyennes
for (i in seq_len(n_rep)) {
samp <- sample(population, n_draw)
sample_means[i] <- mean(samp)
}
print(sample_means)
n_rep <- 100
n_draw <- 50
sample_means <- numeric(n_rep)  # vecteur vide pour stocker les moyennes
for (i in seq_len(n_rep)) {
samp <- sample(population, n_draw)
sample_means[i] <- mean(samp)
}
print(sample_means)
n_rep <- 100
n_draw <- 50
sample_means <- numeric(n_rep)  # vecteur vide pour stocker les moyennes
for (i in seq_len(n_rep)) {
samp <- sample(population, n_draw)
sample_means[i] <- mean(samp)
}
print(sample_means)
n_rep <- 100
n_draw <- 50
sample_means <- numeric(n_rep)  # vecteur vide pour stocker les moyennes
for (i in seq_len(n_rep)) {
samp <- sample(population, n_draw)
sample_means[i] <- mean(samp)
}
print(sample_means)
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
mean(sample_means)
set.seed(123)
population=rnorm(200,600000,50000)
moyenne_population<-mean(population) #moyenne
var_population <- mean((population - mean(population))^2)# calcul direct de la variance
# calcul indirect de la variance
n_population <- length(population)
var2_population <- var(population) * (n-1) / n
ecart_type_population<-sd(population)
n
moyenne_population
var_population
var2_population
ecart_type_population
echantillon=sample(population,50)
echantillon
n_echantillon <- length(echantillon) # taille de l'écahntillon
moyenne_echantillon<-mean(echantillon) #moyenne
var_echantillon <- var(echantillon) # variance
ecart_type_echantillon<-sd(echantillon)
n_echantillon
moyenne_echantillon
var_echantillon
ecart_type_echantillon
# estimateur de la variance de la moyenne
var_est_moy<-(1-(n_echantillon/n_population))*(var_echantillon/n_echantillon)
var_est_moy
ecar_typ_moyenne<-sqrt(var_est_moy)
var_est_moy
ecar_typ_moyenne
intervalle1<-moyenne_echantillon-qnorm(0.97)*ecart_type_echantillon
intervalle2<-inf_intervalle<-moyenne_echantillon+qnorm(0.97)*ecart_type_echantillon
intervalle1
intervalle2
t.test(echantillon)
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
mean(sample_means)
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
mean(sample_means)
var(sample)*99/100
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
mean(sample_means)
var(sample)*(99/100)
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
mean(sample_means)
var(sample_means)*(99/100)
sqrt(var(sample_means)*99/100)
set.seed(123)
population=rnorm(200,600000,50000)
moyenne_population<-mean(population) #moyenne
var_population <- mean((population - mean(population))^2)# calcul direct de la variance
# calcul indirect de la variance
n_population <- length(population)
var2_population <- var(population) * (n-1) / n
ecart_type_population<-sd(population)
n
moyenne_population
var_population
var2_population
ecart_type_population
echantillon=sample(population,50)
echantillon
n_echantillon <- length(echantillon) # taille de l'écahntillon
moyenne_echantillon<-mean(echantillon) #moyenne
var_echantillon <- var(echantillon) # variance
ecart_type_echantillon<-sd(echantillon)
n_echantillon
moyenne_echantillon
var_echantillon
ecart_type_echantillon
# estimateur de la variance de la moyenne
var_est_moy<-(1-(n_echantillon/n_population))*(var_echantillon/n_echantillon)
var_est_moy
ecar_typ_moyenne<-sqrt(var_est_moy)
var_est_moy
ecar_typ_moyenne
intervalle1<-moyenne_echantillon-qnorm(0.97)*ecart_type_echantillon
intervalle2<-inf_intervalle<-moyenne_echantillon+qnorm(0.97)*ecart_type_echantillon
intervalle1
intervalle2
t.test(echantillon)
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
mean(sample_means)
var(sample_means)*(99/100)
sqrt(var(sample_means)*99/100)
# 1) Standardisation des moyennes
z_scores <- (sample_means - mean(sample_means)) / sd(sample_means)
# 2) Tracé de l’histogramme (densité plutôt que fréquence)
hist(z_scores,
prob = TRUE,
breaks = 30,
main  = "Histogramme des moyennes standardisées",
xlab  = "Z-scores",
ylab  = "Densité",
border= "grey40",
col   = "lightgrey")
# 3) Ajout de la densité empirique
lines(density(z_scores),
lwd = 2)
# 4) Ajout de la densité de la N(0,1)
curve(dnorm(x),
from = min(z_scores),
to   = max(z_scores),
col  = "red",
lwd  = 2,
add  = TRUE)
# 5) Légende
legend("topright",
legend = c("Densité empirique", "Densité N(0,1)"),
col    = c("black", "red"),
lwd    = 2)
hist(z_scores,
prob = TRUE, breaks = 30,
main  = "Histogramme des moyennes standardisées",
xlab  = "Z-scores", ylab = "Densité",
border= "grey40", col = "lightgrey")
lines(density(z_scores), lwd = 2)
curve(dnorm(x), from = min(z_scores), to = max(z_scores),
col = "red", lwd = 2, add = TRUE)
# déplacer la légende en haut à gauche
legend("topleft",
legend = c("Densité empirique", "Densité N(0,1)"),
col    = c("black", "red"),
lwd    = 2,
bg     = "white")       # fond opaque pour plus de lisibilité
library(ggplot2)
ggplot(data.frame(z = z_scores), aes(x = z)) +
geom_histogram(aes(y = ..density..),
bins = 30, fill = "lightgrey", color = "grey40") +
geom_density(size = 1) +
stat_function(fun = dnorm, args = list(0,1),
color = "red", size = 1) +
labs(title = "Histogramme des moyennes standardisées",
x     = "Z-scores", y     = "Densité") +
theme_minimal() +
theme(legend.position = "bottom")  # ou "top", "left", "right"
set.seed(123)
population=rnorm(200,600000,50000)
moyenne_population<-mean(population) #moyenne
var_population <- mean((population - mean(population))^2)# calcul direct de la variance
# calcul indirect de la variance
n_population <- length(population)
var2_population <- var(population) * (n-1) / n
ecart_type_population<-sd(population)
n
moyenne_population
var_population
var2_population
ecart_type_population
echantillon=sample(population,50)
echantillon
n_echantillon <- length(echantillon) # taille de l'écahntillon
moyenne_echantillon<-mean(echantillon) #moyenne
var_echantillon <- var(echantillon) # variance
ecart_type_echantillon<-sd(echantillon)
n_echantillon
moyenne_echantillon
var_echantillon
ecart_type_echantillon
# estimateur de la variance de la moyenne
var_est_moy<-(1-(n_echantillon/n_population))*(var_echantillon/n_echantillon)
var_est_moy
ecar_typ_moyenne<-sqrt(var_est_moy)
var_est_moy
ecar_typ_moyenne
intervalle1<-moyenne_echantillon-qnorm(0.97)*ecart_type_echantillon
intervalle2<-inf_intervalle<-moyenne_echantillon+qnorm(0.97)*ecart_type_echantillon
intervalle1
intervalle2
t.test(echantillon)
# Répéter 100 fois le tirage et le calcul de la moyenne
sample_means <- replicate(
n = 100,
expr = mean(sample(population, 50))
)
# Afficher le vecteur des 100 moyennes
print(sample_means)
mean(sample_means)
var(sample_means)*(99/100)
sqrt(var(sample_means)*99/100)
hist(z_scores,
prob = TRUE, breaks = 30,
main  = "Histogramme des moyennes standardisées",
xlab  = "Z-scores", ylab = "Densité",
border= "grey40", col = "lightgrey")
lines(density(z_scores), lwd = 2)
curve(dnorm(x), from = min(z_scores), to = max(z_scores),
col = "red", lwd = 2, add = TRUE)
# déplacer la légende en haut à gauche
legend("topleft",
legend = c("Densité empirique", "Densité N(0,1)"),
col    = c("black", "red"),
lwd    = 2,
bg     = "white")       # fond opaque pour plus de lisibilité
library(ggplot2)
ggplot(data.frame(z = z_scores), aes(x = z)) +
geom_histogram(aes(y = ..density..),
bins = 30, fill = "lightgrey", color = "grey40") +
geom_density(size = 1) +
stat_function(fun = dnorm, args = list(0,1),
color = "red", size = 1) +
labs(title = "Histogramme des moyennes standardisées",
x     = "Z-scores", y     = "Densité") +
theme_minimal() +
theme(legend.position = "bottom")  # ou "top", "left", "right"
########## Tratification ###########
#Etude de la dépense jounalière des étudiants de l'ENSAE
# Tailles des strates
N_h <- c(55, 100, 45)  # AS, ISE, MASTER
N <- sum(N_h)
n <- 100
##1-- Allocation proportionnelle
n_h <- round(n * N_h / N)
## Tirage dans chaque strate
set.seed(123)
AS <- rnorm(n_h[1], mean=800, sd=200)
ISE <- rnorm(n_h[2], mean=1000, sd=300)
MASTER <- rnorm(n_h[3], mean=1500, sd=500)
AS ; ISE; MASTER
c(AS, ISE, MASTER)
#### Estimation ####
## Calcul des moyennes et variances par strate
X_bar_h <- c(mean(AS), mean(ISE), mean(MASTER))
s2_h <- c(var(AS), var(ISE), var(MASTER))
X_bar_h; s2_h
## Moyenne stratifiée
(X_bar_strat <- sum((N_h / N) * X_bar_h))
## Variance estimée
(V_X_bar_strat <- sum((N_h / N)^2 * (1 - n_h/N_h) * s2_h / n_h))
## Intervalle de confiance
quant <- qt(0.975, df=n-1)
IC_inf <- X_bar_strat - quant * sqrt(V_X_bar_strat)
IC_sup <- X_bar_strat + quant * sqrt(V_X_bar_strat)
cat("Moyenne stratifiée =", round(X_bar_strat, 2), "\n",
"IC pour la moyenne à 95% est de [", round(IC_inf, 2), ";", round(IC_sup, 2), "]")
##### TP1 #####
Pop = read.table("C:/Intel/AS2/S2/Théorie des sondages/Pratique/Population.txt", header = T)
attach(Pop)
n=nrow(Pop) # Nombre d'individus
n
Pop$Taille
TaillePop=Pop[,1] #Recupération de la variable Taille dans la base
table(TaillePop)
# Se donner une idée de la distribution en vue de création des strates
hist(TaillePop)
plot(sort(TaillePop))
### Avec Méthode de la fonction cumulative de la racine carrée des fréquences de stratification
cum1 <- strata.cumrootf(TaillePop, nclass = 20, CV = 0.05, Ls = 3, alloc = c(0.5, 0, 0)) #Crée trois strates Ls=3 à partir de 20 classes nclass = 20
install.packages("stratification");
library(stratification)
### Avec Méthode de la fonction cumulative de la racine carrée des fréquences de stratification
cum1 <- strata.cumrootf(TaillePop, nclass = 20, CV = 0.05, Ls = 3, alloc = c(0.5, 0, 0)) #Crée trois strates Ls=3 à partir de 20 classes nclass = 20
cum1
cum1 <- strata.cumrootf(TaillePop, nclass = 20, n=100, Ls = 3, alloc = c(0.5, 0, 0.5)) #Crée trois strates Ls=3 à partir de 20 classes nclass = 20
cum1
plot(cum1)
cum1 <- strata.cumrootf(TaillePop, nclass = 20, n=100, Ls = 3, alloc = c(0.5, 0, 0.5)) #Crée trois strates Ls=3 à partir de 20 classes nclass = 20
cum1
plot(cum1)
library(stratification)
##### TP1 #####
Pop = read.table("C:/Intel/AS2/S2/Théorie des sondages/Pratique/Population.txt", header = T)
attach(Pop)
n=nrow(Pop) # Nombre d'individus
n
Pop$Taille
TaillePop=Pop[,1] #Recupération de la variable Taille dans la base
table(TaillePop)
# Se donner une idée de la distribution en vue de création des strates
hist(TaillePop)
library(stratification)
##### TP1 #####
Pop = read.table("C:/Intel/AS2/S2/Théorie des sondages/Pratique/Population.txt", header = T)
attach(Pop)
n=nrow(Pop) # Nombre d'individus
n
Pop$Taille
TaillePop=Pop[,1] #Recupération de la variable Taille dans la base
table(TaillePop)
# Se donner une idée de la distribution en vue de création des strates
hist(TaillePop)
plot(sort(TaillePop))
### Avec Méthode de la fonction cumulative de la racine carrée des fréquences de stratification
cum1 <- strata.cumrootf(TaillePop, nclass = 20, CV = 0.05, Ls = 3, alloc = c(0.5, 0, 0)) #Crée trois strates Ls=3 à partir de 20 classes nclass = 20
cum1
cum1 <- strata.cumrootf(TaillePop, nclass = 20, n=100, Ls = 3, alloc = c(0.5, 0, 0.5)) #Crée trois strates Ls=3 à partir de 20 classes nclass = 20
cum1
plot(cum1)
shiny::runApp('C:/Intel/AS2/S2/Conception de Tableaux de bord/r shiny/essai')
# ===== DÉPLOIEMENT APPLICATION GESTION DES TABLETTES =====
# 1. Charger les bibliothèques nécessaires
library(rsconnect)
library(RSQLite)
library(DBI)
# 2. Vérifier que nous sommes dans le bon répertoire
cat("Répertoire actuel:", getwd(), "\n")
cat("Fichiers présents:", list.files(), "\n")
setwd("C:/Users/User/Desktop/tablette_manager")
# 2. Vérifier que nous sommes dans le bon répertoire
cat("Répertoire actuel:", getwd(), "\n")
cat("Fichiers présents:", list.files(), "\n")
# 3. Vérifier la configuration shinyapps.io
cat("\n=== VÉRIFICATION CONFIGURATION ===\n")
accounts <- rsconnect::accounts()
if (length(accounts) > 0) {
cat("✅ Compte(s) configuré(s):\n")
print(accounts)
} else {
cat("❌ Aucun compte configuré\n")
cat("Utilisez: rsconnect::setAccountInfo() pour configurer\n")
}
# 4. Test rapide de l'application
cat("\n=== TEST RAPIDE ===\n")
tryCatch({
source("app.R", echo = FALSE)
cat("✅ Application chargée sans erreur\n")
}, error = function(e) {
cat("❌ Erreur lors du chargement:", e$message, "\n")
stop("Corriger l'erreur avant le déploiement")
})
# 5. Déploiement avec rsconnect::deployApp
cat("\n=== DÉPLOIEMENT ===\n")
tryCatch({
cat("Déploiement en cours...\n")
# Déployer avec un nom spécifique
rsconnect::deployApp(
appName = "E-tablette_manager",
appTitle = "Gestion des Tablettes",
appFiles = c("app.R", "www/", "Fiche_Affectation_Materiel.docx"),
forceUpdate = TRUE
)
cat("✅ Déploiement réussi!\n")
}, error = function(e) {
cat("❌ Erreur lors du déploiement:", e$message, "\n")
# Essayer un déploiement simple
cat("Tentative de déploiement simple...\n")
tryCatch({
rsconnect::deployApp(forceUpdate = TRUE)
cat("✅ Déploiement simple réussi!\n")
}, error = function(e2) {
cat("❌ Échec du déploiement simple:", e2$message, "\n")
})
})
